{"version":3,"sources":["Jalomo_Resume.pdf","NameAnimation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","items","config","mass","tension","friction","NameAnimation","props","useState","toggle","set","theme","themeColor","trail","useTrail","length","opacity","x","height","from","className","onClick","state","map","index","rest","div","key","style","transform","interpolate","avgTypingDelay","startDelay","color","fontWeight","display","themes","Button","styled","button","main","defaultProps","Container","App","max","useSpring","delay","Math","floor","random","href","resume","alt","rel","id","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c4362a8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Jalomo_Resume.b8131394.pdf\";","import React, { useState } from 'react'\nimport { useSpring, useTrail, animated } from 'react-spring'\nimport Typist from 'react-typist';\n//import TvMan from './TvMan.gif'\nimport './type.scss'\nimport './styles.css'\n\nconst items = ['Alexis', 'Leonardo', 'Jalomo']\nconst config = { mass: 20, tension: 2000, friction: 200 }\n\n\n/*\nconst props2 = useSpring({\n    to: async (next, cancel) => {\n      await next({opacity: 0, color: 'rgb(14,26,19)'})\n      await next({opacity: 0.2, color: '#ffaaee'})\n      await next({opacity: 0.1, color: 'rgb(14,26,19)'})\n      await next({opacity: 0.5, color: '#ffaaee'})\n      await next({opacity: 0.3, color: 'rgb(14,26,19)'})\n      await next({opacity: 0.9, color: '#ffaaee'})\n      await next({opacity: 0.7, color: 'rgb(14,26,19)'})\n      await next({opacity: 1, color: '#ffaaee'})\n    },\n    from: {opacity: 0, color: 'red'}\n  })\n<animated.div style={props2}>\n        <img src={TvMan} alt=\"TvMan\" height=\"382px\" width=\"284px\"/>\n      </animated.div> */\n\nfunction NameAnimation(props) {\n  const [toggle, set] = useState(true)\n  const theme = props.themeColor\n  const trail = useTrail(items.length, {\n    config,\n    opacity: toggle ? 1 : 0,\n    x: toggle ? 0 : 20,\n    height: toggle ? 80 : 0,\n    from: { opacity: 0, x: 20, height: 0 },\n  })\n\n  return (\n    <div className=\"trails-main\" onClick={() => set(state => !state)}>\n      <div>\n        {trail.map(({ x, height, ...rest }, index) => (\n          <animated.div\n            key={items[index]}\n            className=\"trails-text\"\n            style={{ ...rest, transform: x.interpolate(x => `translate3d(0,${x}px,0)`)}}>\n            <animated.div style={{ height }}>{items[index]}</animated.div>\n          </animated.div>\n        ))}\n        <Typist avgTypingDelay={40} startDelay={3000} >\n            <h1 style={{color: theme, fontWeight:500 , display:'inline'}}> \n                Welcome to my portfolio\n            </h1> \n        </Typist>\n      </div>\n    </div>\n  )\n}\n//fontFamily:'\"Courier New\", Courier, monospace'\n\nexport default NameAnimation;","import React, { useState } from 'react';\nimport Name from './NameAnimation'\nimport Typist from 'react-typist';\nimport resume from './Jalomo_Resume.pdf'\nimport './type.scss'\nimport {useSpring, animated, useTrail} from 'react-spring'\n\n// Styled-components lets you write actual CSS in your JavaScript\nimport styled, { ThemeProvider } from 'styled-components'\n\nimport './App.css'; //background-color: #000015;\n\n\nconst themes = [\"palevioletred\", \"mediumseagreen\", \"violet\", \"slateblue\", \"deepskyblue\", \"paleturquoise\", \"silver\", \"navajowhite\"]\n\nconst Button = styled.button`\n  background: transparent;\n  border-radius: 3px;\n  margin: 0 1em;\n  font-size: 18px;\n  padding: 0.25em 1em;\n  cursor: pointer;\n\n  /* Color the border and text with theme.main */\n  color: ${props => props.theme.main};\n  border: 2px solid ${props => props.theme.main};\n\n  transition: 0.5s all ease-out;\n\n  &:hover {\n    background: solid;\n    background-color: ${props => props.theme.main};\n    border: 3px solid ${props => props.theme.main};\n    color: white;\n    box-shadow: 0 12px 16px 0 rgba(192,192,192,0.3), 0 17px 50px 0 rgba(192,192,192,0.1);\n  }\n`\n\n\n// We are passing a default theme for Buttons that arent wrapped in the ThemeProvider\nButton.defaultProps = {\n  theme: {\n    main: \"palevioletred\"\n  }\n}\n\n\nconst Container = styled.div`\n  text-align: right;\n  text-center: center;\n  padding:30px; \n  background: linear-gradient(to bottom, rgb(11, 11, 41), rgba(11, 11, 41,.0));\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  z-index: 1030;\n`\n\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction App() {\n  const props = useSpring({ friction: 100, tension: 5, delay: 1800, opacity: 1, from: {opacity: 0}})\n  //const props2 = useSpring({ value: 100, from: { value: 0 } })\n\n\n  // Defining a theme for Styled components, Random every request.\n  const theme = {\n    main: themes[getRandomInt(themes.length)]\n  }\n\n//<img src={ball} alt=\"ball\" height={ballGifSize} width={ballGifSize}/>\n\n\n  return (\n    <div className=\"App\">\n      <Name themeColor={theme.main}/>\n        <animated.div style={props}>\n          <ThemeProvider theme={theme}>\n            <Container>\n              <Button href=\"https://jalomo1197.github.io/Portfolio/#About\"> About </Button>\n              <Button href=\"https://jalomo1197.github.io/Portfolio/#Projects\"> Projects </Button>\n              <Button href={resume} alt='_blank' rel='noopener norefferrer'> Resume </Button>\n              <Button href=\"https://jalomo1197.github.io/Portfolio/#Contact\"> Contact </Button>\n            </Container>\n            <div id=\"About\" className=\"section\" style={{marginTop: 500, color: theme.main}}>\n              <h2> About Me </h2>\n              <p> Im a savage classy boujee ratchet </p>\n            </div>\n            <div id=\"Projects\" className=\"section\" style={{color: theme.main}}>\n              <h2> My Projects </h2>\n              <p> This website LOL </p>\n            </div>\n            <div id=\"Contact\" className=\"section\" style={{color: theme.main}}>\n              <h2> Contact </h2>\n              <p> 8725882999 </p>\n            </div>\n          </ThemeProvider>\n        </animated.div>\n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\n//<App />\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}