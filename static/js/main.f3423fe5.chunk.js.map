{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js","Name.gif"],"names":["module","exports","themes","Button","styled","button","props","theme","main","primary","css","defaultProps","Container","div","App","max","useSpring","opacity","from","length","Math","floor","random","className","src","name","alt","href","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,0vBCY3C,IAAIC,EAAS,CAAC,gBAAiB,iBAAkB,SAAU,YAAa,cAAe,gBAAiB,SAAU,eAE5GC,EAASC,IAAOC,OAAV,KAOD,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QACV,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAMrC,SAAAF,GAAK,OACPA,EAAMG,SACNC,YADA,QASJP,EAAOQ,aAAe,CACpBJ,MAAO,CACLC,KAAM,kBAWV,IAAMI,EAAYR,IAAOS,IAAV,KAUQT,YAAOD,GAoCfW,MAlCf,WACE,IAPoBC,EAOdT,EAAQU,YAAU,CAACC,QAAS,GAAKC,KAAM,CAACD,QAAS,KAIjDV,EAAQ,CACZC,KAAMN,GAZYa,EAYQb,EAAOiB,OAX5BC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMN,OAc7C,OACE,yBAAKQ,UAAU,OACb,yBAAKA,UAAU,cAEb,yBAAKC,IAAKC,IAAMF,UAAU,OAAOG,IAAI,eAErC,yBAAKH,UAAU,kBACb,uBAAGI,KAAK,GAAGJ,UAAU,QAArB,YACA,uBAAGI,KAAK,GAAGJ,UAAU,QAArB,YACA,uBAAGI,KAAK,GAAGJ,UAAU,QAArB,WAGJ,kBAAC,IAASV,IAAV,CAAce,MAAOtB,GAArB,iBACA,kBAAC,IAAD,CAAeC,MAAOA,GACpB,kBAACK,EAAD,KACE,kBAACT,EAAD,CAAQwB,KAAK,IAAb,cACA,kBAACxB,EAAD,CAAQwB,KAAK,IAAb,cACA,kBAACxB,EAAD,CAAQwB,KAAK,IAAb,WACA,kBAACxB,EAAD,CAAQwB,KAAK,IAAb,iBC9EUE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BhD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.f3423fe5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport name from './Name.gif'\nimport { motion } from \"framer-motion\"\nimport {useSpring, animated} from 'react-spring'\n\n// Styled-components lets you write actual CSS in your JavaScript\nimport styled, { css, ThemeProvider } from 'styled-components'\n\nimport './App.css';\n\n\nvar themes = [\"palevioletred\", \"mediumseagreen\", \"violet\", \"slateblue\", \"deepskyblue\", \"paleturquoise\", \"silver\", \"navajowhite\"]\n\nconst Button = styled.button`\n  background: transparent;\n  border-radius: 3px;\n  margin: 0 1em;\n  padding: 0.25em 1em;\n\n  /* Color the border and text with theme.main */\n  color: ${props => props.theme.main};\n  border: 2px solid ${props => props.theme.main};\n\n  &:hover {\n    background-color: props.theme.main;\n    color: white;\n  }\n /* ${props =>\n    props.primary &&\n    css`\n      background: props.theme.main;\n      color: white;\n    `};*/\n`\n\n\n// We are passing a default theme for Buttons that arent wrapped in the ThemeProvider\nButton.defaultProps = {\n  theme: {\n    main: \"palevioletred\"\n  }\n}\n\n\n// Define what props.theme will look like\n//const theme = {\n//  main: \"mediumseagreen\"\n//};\n\n\nconst Container = styled.div`\n  text-align: center;\n  background: black;\n`\n\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nconst AnimatedButton = styled(Button)\n\nfunction App() {\n  const props = useSpring({opacity: 0.5, from: {opacity: 0}})\n  //const props2 = useSpring({ value: 100, from: { value: 0 } })\n  \n\n  const theme = {\n    main: themes[getRandomInt(themes.length)]\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"navigation\">\n      \n        <img src={name} className=\"logo\" alt=\"Logo Image\" />\n    \n        <div className=\"navigation-sub\">\n          <a href=\"\" className=\"item\">Projects</a>\n          <a href=\"\" className=\"item\">Articles</a>\n          <a href=\"\" className=\"item\">About</a>\n        </div>\n      </div>\n      <animated.div style={props}> I will FADE </animated.div>\n      <ThemeProvider theme={theme}>\n        <Container>\n          <Button href=\"\"> Projects </Button>\n          <Button href=\"\"> Articles </Button>\n          <Button href=\"\"> About </Button>\n          <Button href=\"\"> Contact </Button>\n        </Container>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Name.f75d8211.gif\";"],"sourceRoot":""}